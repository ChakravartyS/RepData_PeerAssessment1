getwd()
x <- c("a", "b")
pkg.to.load.chr <- c ("ggplot2", "knitr")
setwd(paste("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1"))
help paste
help ("paste")
paste("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1")
setwd(paste("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1"),
collapse = NULL)
setwd(paste("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1",
collapse = NULL))
paste("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1",
collapse = NULL)
paste("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1",
sep = NULL)
paste0("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1",
sep = NULL)
setwd (paste0 ("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1"))
install.packages("knitr")
install.packages("ggplot2")
list.of.packages <- c("ggplot2", "knitr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
installed.packages() [, "Package"]
pkgs.needed.chr <- c ("ggplot2", "knitr")
new.pkgs.chr <-
pkgs.needed.chr [!(pkgs.needed.chr  %in%  installed.packages() [, "Package"])]
if (length (new.pkgs.chr)) {
install.packages (new.pkgs.chr)
}
source.zipFileName.chr <- "activity.zip"
source.zipFile.url <-
"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
extract.csvFileName.chr <- "activity.csv"
if (! (file.exists (source.zipFileName.chr))) {
download.file (source.zipFile.url,
destfile = source.zipFileName.chr)
}
source.zipFileName.chr <- "repdata-data-activity.zip"
source.zipFile.url <-
"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
extract.csvFileName.chr <- "activity.csv"
## ---- Download Activity Data zip Dataset as Needed ----
if (! (file.exists (source.zipFileName.chr))) {
download.file (source.zipFile.url,
destfile = source.zipFileName.chr)
}
unzip (source.zipFileName)
unzip (source.zipFileName.chr)
totalSteps.int <- tapply (activityData.df $ steps,
activityData.df $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Activity Data Frame from CSV File ----
activityData.df <- read.csv (extract.csvFileName)
## ---- Calculate Total Number of Steps, ignoring Missing Data ----
totalSteps.int <- tapply (activityData.df $ steps,
activityData.df $ date,
FUN=sum,
na.rm = TRUE)
activityData.df <- read.csv (extract.csvFileName)
getwd()
unzip (source.zipFileName.chr)
activityData.df <- read.csv (extract.csvFileName)
activityData.df <- read.csv (extract.csvFileName.chr)
clear
remove
remove()
## ---- peerAssessment1.R Housekeeping ----
setwd (paste0 ("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1"))
echo = TRUE
## ---- Install Necessary Packages as Needed ----
pkgsNeeded <- c ("ggplot2", "knitr")
newPkgs <- pkgsNeeded [!(pkgsNeeded  %in%  installed.packages() [, "Package"])]
if (length (newPkgs)) {
install.packages (newPkgs)
}
sourceZipFileName <- "repdata-data-activity.zip"
sourceZipFileUrl <-
"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
extractCsvFileName <- "activity.csv"
## ---- Download Activity Data zip Dataset as Needed ----
if (! (file.exists (sourceZipFileName))) {
download.file (sourceZipFileUrl,
destfile = sourceZipFileName)
}
## ---- Extract Activity Data CSV File ----
unzip (sourceZipFileName)
## ---- Create Activity Data Frame from CSV File ----
activityData <- read.csv (extractCsvFileName)
## ---- Calculate Total Number of Steps, ignoring Missing Data ----
totalSteps <- tapply (activityData $ steps,
activityData $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day ----
hist (totalSteps,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day ----
mean (totalSteps, na.rm=TRUE)
median (totalSteps, na.rm = TRUE)
## ---- Make Time Series Plot ----
averageSteps <- aggregate (x = list (steps = activityData $ steps),
by = list (interval = activityData $ interval),
FUN=mean,
na.rm=TRUE)
ggplot (data = averageSteps,
aes (x = interval, y = steps)) +
geom_line (color = "blue") +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
ggplot2 (data = averageSteps,
aes (x = interval, y = steps)) +
geom_line (color = "blue") +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
help (ggplot)
## ---- peerAssessment1.R Housekeeping ----
setwd (paste0 ("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1"))
echo = TRUE
## ---- Install Necessary Packages as Needed ----
pkgsNeeded <- c ("ggplot2", "knitr")
newPkgs <- pkgsNeeded [!(pkgsNeeded  %in%  installed.packages() [, "Package"])]
if (length (newPkgs)) {
install.packages (newPkgs)
}
sourceZipFileName <- "repdata-data-activity.zip"
sourceZipFileUrl <-
"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
extractCsvFileName <- "activity.csv"
## ---- Download Activity Data zip Dataset as Needed ----
if (! (file.exists (sourceZipFileName))) {
download.file (sourceZipFileUrl,
destfile = sourceZipFileName)
}
## ---- Extract Activity Data CSV File ----
unzip (sourceZipFileName)
## ---- Create Activity Data Frame from CSV File ----
activityData <- read.csv (extractCsvFileName)
## ---- Calculate Total Number of Steps, ignoring Missing Data ----
totalSteps <- tapply (activityData $ steps,
activityData $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day ----
hist (totalSteps,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day ----
mean (totalSteps, na.rm=TRUE)
median (totalSteps, na.rm = TRUE)
## ---- Make Time Series Plot ----
averageSteps <- aggregate (x = list (steps = activityData $ steps),
by = list (interval = activityData $ interval),
FUN=mean,
na.rm=TRUE)
ggplot2 (data = averageSteps,
aes (x = interval, y = steps)) +
geom_line (color = "blue") +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
ggplot (data = averageSteps,
aes (x = interval, y = steps)) +
geom_line (color = "blue") +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
## ---- peerAssessment1.R Housekeeping ----
setwd (paste0 ("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1"))
echo = TRUE
## ---- Install Necessary Packages as Needed ----
pkgsNeeded <- c ("ggplot2", "knitr")
newPkgs <- pkgsNeeded [!(pkgsNeeded  %in%  installed.packages() [, "Package"])]
if (length (newPkgs)) {
install.packages (newPkgs)
}
lapply (pkgsNeeded, library, character.only = TRUE)
sourceZipFileName <- "repdata-data-activity.zip"
sourceZipFileUrl <-
"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
extractCsvFileName <- "activity.csv"
## ---- Download Activity Data zip Dataset as Needed ----
if (! (file.exists (sourceZipFileName))) {
download.file (sourceZipFileUrl,
destfile = sourceZipFileName)
}
## ---- Extract Activity Data CSV File ----
unzip (sourceZipFileName)
## ---- Create Activity Data Frame from CSV File ----
activityData <- read.csv (extractCsvFileName)
## ---- Calculate Total Number of Steps, ignoring Missing Data ----
totalSteps <- tapply (activityData $ steps,
activityData $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day ----
hist (totalSteps,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day ----
mean (totalSteps, na.rm=TRUE)
median (totalSteps, na.rm = TRUE)
## ---- Make Time Series Plot ----
averageSteps <- aggregate (x = list (steps = activityData $ steps),
by = list (interval = activityData $ interval),
FUN=mean,
na.rm=TRUE)
ggplot (data = averageSteps,
aes (x = interval, y = steps)) +
geom_line (color = "blue") +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
#---- Determine 5-Minute Interval with Maximum Number of Steps ----
averageSteps [which.max(averageSteps $ steps),] $ interval
## ---- Determine Number of Missing Values in Activity Dataset ----
sum (is.na (activityData))
## ---- Create New Activity Dataset with Missing Values as Mean of 5-Minute Interval ----
activityDataNoNA.df <- activityData
for (i in 1 : nrow (activityDataNoNA)) {
if (is.na (activityDataNoNA $ steps [i])) {
activityDataNoNA $ steps [i] <-
averageSteps [which (activityData $ interval [i] ==
averageSteps $ interval), ] $ steps
}
}
## ---- Create New Activity Dataset with Missing Values as Mean of 5-Minute Interval ----
activityDataNoNA <- activityData
for (i in 1 : nrow (activityDataNoNA)) {
if (is.na (activityDataNoNA $ steps [i])) {
activityDataNoNA $ steps [i] <-
averageSteps [which (activityData $ interval [i] ==
averageSteps $ interval), ] $ steps
}
}
View(activityDataNoNA.df)
rm (activityDataNoNA.df)
## ---- Calculate Total Number of Steps Using Activity Dataset with NO Missing Data ----
totalStepsNoNA <- tapply (activityDataNoNA $ steps,
activityDataNoNA $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day (NO Missing Data) ----
hist (totalStepsNoNA,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day
(NO Missing Data)",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day (NO Missing Data) ----
mean (totalStepsNoNA)
median (totalStepsNoNA)
## ---- Create New Factor Variable Day as Weekday or Weekend, Based on Date ----
weekdayWeekend <- function (givenDate) {
if (weekdays (givenDate) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (weekdays (givenDate) %in% c("Saturday", "Sunday"))
return("weekend")
}
activityDataNoNA $ day <- sapply (as.Date (activityDataNoNA $ date), FUN=weekdayWeekend)
## ---- Make Panel Plot of Time Series of 5-Minute Intervals vs. Avg Number of Steps ----
avgStepsNoNA <- aggregate (steps ~ interval + day, data = activityDataNoNA, mean)
ggplot (avgStepsNoNA, aes(interval, steps)) + geom_line(color = "blue") +
facet_grid(day ~ .) + xlab ("5-Minute Interval") + ylab ("Average Number of Steps")
ggplot (avgStepsNoNA, aes (interval, steps)) + geom_line (color = "blue") +
facet_grid (day ~ .) + xlab ("5-Minute Interval") + ylab ("Average Number of Steps")
ggplot (avgStepsNoNA, aes (interval, steps)) + geom_line (color = "blue") +
facet_grid (day ~ .) + xlab ("5-Minute Interval") + ylab ("Average Number of Steps")
## ---- peerAssessment1.R Housekeeping ----
setwd (paste0 ("D:/00 COURSERA/00 DATA SCIENCE SPECIALIZATION/05 Reproducible Research/",
"Week 2/Quiz & Peer Assessment 1/RepData_PeerAssessment1"))
echo = TRUE
## ---- Install Necessary Packages as Needed ----
pkgsNeeded <- c ("ggplot2", "knitr")
newPkgs <- pkgsNeeded [!(pkgsNeeded  %in%  installed.packages() [, "Package"])]
if (length (newPkgs)) {
install.packages (newPkgs)
}
lapply (pkgsNeeded, library, character.only = TRUE)
sourceZipFileName <- "repdata-data-activity.zip"
sourceZipFileUrl <-
"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
extractCsvFileName <- "activity.csv"
## ---- Download Activity Data zip Dataset as Needed ----
if (! (file.exists (sourceZipFileName))) {
download.file (sourceZipFileUrl,
destfile = sourceZipFileName)
}
## ---- Extract Activity Data CSV File ----
unzip (sourceZipFileName)
## ---- Create Activity Data Frame from CSV File ----
activityData <- read.csv (extractCsvFileName)
## ---- Calculate Total Number of Steps, ignoring Missing Data ----
totalSteps <- tapply (activityData $ steps,
activityData $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day ----
hist (totalSteps,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day ----
mean (totalSteps, na.rm=TRUE)
median (totalSteps, na.rm = TRUE)
## ---- Make Time Series Plot ----
averageSteps <- aggregate (x = list (steps = activityData $ steps),
by = list (interval = activityData $ interval),
FUN=mean,
na.rm=TRUE)
ggplot (data = averageSteps,
aes (x = interval, y = steps)) +
geom_line (color = "blue") +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
#---- Determine 5-Minute Interval with Maximum Number of Steps ----
averageSteps [which.max(averageSteps $ steps),] $ interval
## ---- Determine Number of Missing Values in Activity Dataset ----
sum (is.na (activityData))
## ---- Create New Activity Dataset with Missing Values as Mean of 5-Minute Interval ----
activityDataNoNA <- activityData
for (i in 1 : nrow (activityDataNoNA)) {
if (is.na (activityDataNoNA $ steps [i])) {
activityDataNoNA $ steps [i] <-
averageSteps [which (activityData $ interval [i] ==
averageSteps $ interval), ] $ steps
}
}
## ---- Calculate Total Number of Steps Using Activity Dataset with NO Missing Data ----
totalStepsNoNA <- tapply (activityDataNoNA $ steps,
activityDataNoNA $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day (NO Missing Data) ----
hist (totalStepsNoNA,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day
(NO Missing Data)",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day (NO Missing Data) ----
mean (totalStepsNoNA)
median (totalStepsNoNA)
## ---- Create New Factor Variable Day as Weekday or Weekend, Based on Date ----
weekdayWeekend <- function (givenDate) {
if (weekdays (givenDate) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (weekdays (givenDate) %in% c("Saturday", "Sunday"))
return("weekend")
}
activityDataNoNA $ day <- sapply (as.Date (activityDataNoNA $ date), FUN=weekdayWeekend)
## ---- Make Panel Plot of Time Series of 5-Minute Intervals vs. Avg Number of Steps ----
avgStepsNoNA <- aggregate (steps ~ interval + day, data = activityDataNoNA, mean)
ggplot (avgStepsNoNA, aes (interval, steps)) + geom_line (color = "blue") +
facet_grid (day ~ .) + xlab ("5-Minute Interval") + ylab ("Average Number of Steps")
## --------------------------------------------------------------------------------------
help ("aggregate")
help (ggplot)
help (ggplot2)
??ggplot
