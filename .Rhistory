activityData.df $ date,
FUN=sum,
na.rm = TRUE)
## ---- Calculate Total Number of Steps ----
totalSteps.int <- tapply (activityData.df $ steps,
activityData.df $ date,
FUN=sum,
na.rm = TRUE)
totalSteps.int <- tapply (activityData.df $ steps,
activityData.df $ date,
FUN=sum,
na.rm = FALSE)
rm (totalSteps.int)
help (tapply)
## ---- Calculate Total Number of Steps, ignoring Missing Data ----
totalSteps.int <- tapply (activityData.df $ steps,
activityData.df $ date,
FUN=sum,
na.rm = FALSE)
na.rm = TRUE)
## ---- Calculate Total Number of Steps, ignoring Missing Data ----
totalSteps.int <- tapply (activityData.df $ steps,
activityData.df $ date,
FUN=sum,
na.rm = TRUE)
head (totalSteps.int)
hist(pollution$pm25, col = "green", breaks = 100)
ggplot(noNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
qplot(totalSteps.int, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
mean(totalSteps.int, na.rm=TRUE)
median (totalSteps.int
,na.rm=TRUE)
median (totalSteps.int, na.rm = TRUE)
hist (totalSteps.int, col = "green", breaks = 100)
hist (totalSteps.int, col = "green", breaks = 1000)
hist (totalSteps.int, col = "green", breaks = 10)
ggplot (totalSteps.int, aes(date, steps)) +
geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) +
facet_grid(. ~ month, scales = "free") +
labs(title = "Histogram of Total Number of Steps Taken Each Day",
x = "Date", y = "Total number of steps")
ggplot (activityData.noNA.df, aes(date, steps)) +
geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) +
facet_grid(. ~ month, scales = "free") +
labs(title = "Histogram of Total Number of Steps Taken Each Day",
x = "Date", y = "Total number of steps")
qplot (totalSteps.int, binwidth=1000, xlab="total number of steps taken each day")
hist (totalSteps.int, col = "green", breaks = 10)
qplot (totalSteps.int, binwidth=1000, xlab="total number of steps taken each day")
hist (totalSteps.int, col = "green", breaks = 10)
str (activityData.df)
summary (activityData.df)
summary (activityData.noNA.df)
help (hist)
hist (totalSteps.int, col = "green", breaks = 10,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of steps")
hist (totalSteps.int, col = "green", breaks = 10,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.int, col = "green", breaks = 15,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.int, col = "green", breaks = 15,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.int, col = "green", breaks = 20,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.int, col = "green", breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.int, col = "green", breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps",
ylim = 30)
hist (totalSteps.int, col = "green", breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.int, col = "green", breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps", ylim = 20)
hist (totalSteps.int, col = "green", breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.int,
col = "blue",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.int,
col = NULL,
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.int,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.int,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps",
na.rm = TRUE)
summary (totalSteps.int)
str (totalSteps.int)
summary (activityData.df)
help("aggregate")
averageSteps.df <- aggregate (x = list (steps = activityData.df $ steps),
by = list (interval = activityData.df $ interval),
FUN=mean,
na.rm=TRUE)
str (averageSteps.df)
ggplot (data = averageSteps.df,
aes (x = interval, y = steps)) +
geom_line () +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
pkg.to.load.chr <- c ("ggplot2", "knitr")
lapply (pkg.to.load.chr, library, character.only = TRUE)
ggplot (data = averageSteps.df,
aes (x = interval, y = steps)) +
geom_line () +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
ggplot (data = averageSteps.df,
aes (x = interval, y = steps)) +
geom_line (color = "cyan") +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
ggplot (data = averageSteps.df,
aes (x = interval, y = steps)) +
geom_line (color = "blue") +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
hist (totalSteps.int,
col = "blue",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
helP(hist)
help ("hist")
averageSteps.df [which.max(averageSteps.df $ steps),]
## ---- Create Histogram of Total Number of Steps Taken per Day ----
hist (totalSteps.int,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
averageSteps.df $ interval [which.max(averageSteps.df $ steps),]
averageSteps.df [which.max(averageSteps.df $ steps),] $ interval
missingData <- is.na (activityData.df)
table (missingData)
str(missingData)
summary (missingData)
missingData.bool <- is.na (activityData.df)
table (missingData.bool)
sum (is.na (activityData.df))
summary (averageSteps.df)
str (averageSteps.df)
for (i in 1 : nrow(newData)) {
if (is.na(activityData.df $ steps[i])) {
activityData.noNA.df $ steps[i] <- averageSteps.df
[which (activityData.df $ interval[i] == averageSteps.df $ interval), ] $ steps
}
}
summary (activityData.df)
head (activityData.df)
for (i in 1 : nrow(newData)) {
if (is.na(activityData.df $ steps)) {
activityData.noNA.df $ steps <- averageSteps.df
[which (activityData.df $ interval == averageSteps.df $ interval), ] $ steps
}
}
head (averageSteps.df)
for (i in 1 : nrow(newData)) {
if (is.na(activityData.df $ steps)) {
activityData.noNA.df $ steps <- averageSteps.df [which (activityData.df $ interval == averageSteps.df $ interval), ] $ steps
}
}
for (i in 1 : nrow(newData)) {
if (is.na(activityData.df $ steps)) {
activityData.noNA.df $ steps <-
averageSteps.df [which (activityData.df $ interval == averageSteps.df $ interval), ]
$ steps
}
}
for (i in 1 : nrow(newData)) {
if (is.na(activityData.df $ steps)) {
activityData.noNA.df $ steps <-
averageSteps.df [which (activityData.df $ interval == averageSteps.df $ interval), ] $ steps
}
}
for (i in 1 : nrow (activityData.noNA.df)) {
if (is.na(activityData.df $ steps)) {
activityData.noNA.df $ steps <-
averageSteps.df [which (activityData.df $ interval == averageSteps.df $ interval), ] $ steps
}
}
activityData.noNA.df <- activityData.df
for (i in 1 : nrow (activityData.noNA.df)) {
if (is.na(activityData.df $ steps)) {
activityData.noNA.df $ steps <-
averageSteps.df [which (activityData.df $ interval == averageSteps.df $ interval), ] $ steps
}
}
activityData.noNA.df <- activityData.df
for (i in 1 : nrow (activityData.noNA.df)) {
if (is.na (activityData.noNA.df $ steps)) {
activityData.noNA.df $ steps <-
averageSteps.df [which (activityData.df $ interval == averageSteps.df $ interval), ] $ steps
}
}
warnings()
is.na (activityData.noNA.df $ steps [1])
activityData.noNA.df $ steps [1]
is.na (activityData.noNA.df $ steps [10])
head (activityData.noNA.df)
head (activityData.df)
View(activityData.df)
View(activityData.noNA.df)
activityData.noNA.df <- activityData.df
View(activityData.noNA.df)
View(activityData.df)
is.na (activityData.noNA.df $ steps [10])
activityData.noNA.df <- activityData.df
for (i in 1 : nrow (activityData.noNA.df)) {
if (is.na (activityData.noNA.df $ steps [i])) {
activityData.noNA.df $ steps [i] <-
averageSteps.df [which (activityData.df $ interval == averageSteps.df $ interval), ] $ steps
}
}
warnings ()
head (averageSteps.df)
activityData.noNA.df <- activityData.df
for (i in 1 : nrow (activityData.noNA.df)) {
if (is.na (activityData.noNA.df $ steps [i])) {
activityData.noNA.df $ steps [i] <-
averageSteps.df [which (activityData.df $ interval [i] == averageSteps.df $ interval), ] $ steps
}
}
View(activityData.noNA.df)
View(activityData.df)
for (i in 1 : nrow (activityData.noNA.df)) {
if (is.na (activityData.noNA.df $ steps [i])) {
activityData.noNA.df $ steps [i] <-
averageSteps.df [which (activityData.df $ interval [i] ==
averageSteps.df $ interval), ] $ steps
}
}
activityData.noNA.df <- activityData.df
for (i in 1 : nrow (activityData.noNA.df)) {
if (is.na (activityData.noNA.df $ steps [i])) {
activityData.noNA.df $ steps [i] <-
averageSteps.df [which (activityData.df $ interval [i] ==
averageSteps.df $ interval), ] $ steps
}
}
View(activityData.noNA.df)
sum (is.na (activityData.noNA.df))
totalSteps.noNA.int <- tapply (activityData.noNA.df $ steps,
activityData.noNA.df $ date,
FUN=sum,
na.rm = TRUE)
## ---- Calculate Total Number of Steps Using Activity Dataset with NO Missing Data ----
totalSteps.noNA.int <- tapply (activityData.noNA.df $ steps,
activityData.noNA.df $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day (NO Missing Data) ----
hist (totalSteps.noNA.int,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
hist (totalSteps.noNA.int,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day (NO Missing Data)",
xlab = "Total number of Steps")
hist (totalSteps.noNA.int,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day
(NO Missing Data)",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day (NO Missing Data) ----
mean (totalSteps.noNA.int)
median (totalSteps.noNA.int)
mean (totalSteps.int, na.rm=TRUE)
median (totalSteps.int, na.rm = TRUE)
head (activityData.noNA.df)
activityData.noNA.df $ weekdays <- factor (format (activityData.noNA.df $ date, "%A"))
help ("format")
activityData.noNA.df $ day <- as.Date (activityData.noNA.df $ date)
View(activityData.noNA.df)
View(activityData.noNA.df)
tail (activityData.noNA.df)
activityData.noNA.df $ day <- weekdays (as.Date (activityData.noNA.df $ date))
View(activityData.noNA.df)
tail (activityData.noNA.df)
levels (activityData.noNA.df $ day)
levels(activityData.noNA.df $ day) <- list (weekday = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday"),
weekend = c("Saturday", "Sunday"))
View(activityData.noNA.df)
levels(activityData.noNA.df $ day)
View(activityData.noNA.df)
table (activityData.noNA.df $ day)
weekdayWeekend <- function (aDate) {
if (weekdays (aDate) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (weekdays (aDate) %in% c("Saturday", "Sunday"))
return("weekend")
}
activityData.noNA.df $ day <- sapply (as.Date (activityData.noNA.df $ date),
FUN=weekdayWeekend)
View(activityData.noNA.df)
tail (activityData.noNA.df)
table (activityData.noNA.df $ day)
averageSteps.noNA.df <- aggregate (steps ~ interval + day,
data = activityData.noNA.df,
mean)
ggplot (averageSteps.noNA.df, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab ("5-Minute Interval") + ylab ("Number Of Steps")
ggplot (averageSteps.noNA.df, aes(interval, steps)) + geom_line(color = "blue") + facet_grid(day ~ .) +
xlab ("5-Minute Interval") + ylab ("Average Number Of Steps")
ggplot (averageSteps.noNA.df, aes(interval, steps)) + geom_line(color = "blue") +
facet_grid(day ~ .) + xlab ("5-Minute Interval") + ylab ("Average Number Of Steps")
ggplot (averageSteps.noNA.df, aes(interval, steps)) + geom_line(color = "red") +
facet_grid(day ~ .) + xlab ("5-Minute Interval") + ylab ("Average Number Of Steps")
ggplot (averageSteps.noNA.df, aes(interval, steps)) + geom_line(color = "blue") +
facet_grid(day ~ .) + xlab ("5-Minute Interval") + ylab ("Average Number Of Steps")
echo = TRUE
## ---- peerAssessment1.R Housekeeping ----
setwd("D:/00 COURSERA/00 Reproducible Research/Peer Assessments/RepData_PeerAssessment1")
echo = TRUE
pkg.to.load.chr <- c ("ggplot2", "knitr")
lapply (pkg.to.load.chr, library, character.only = TRUE)
source.zipFileName.chr <- "activity.zip"
source.zipFile.url <-
"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
extract.csvFileName.chr <- "activity.csv"
activityData.dfName.chr <- "activityData.df"
## ---- Download Activity Data zip Dataset as Needed ----
if (! (file.exists (source.zipFileName.chr))) {
download.file (source.zipFile.url,
destfile = source.zipFileName.chr)
}
## ---- Extract Activity Data CSV File ----
unzip (source.zipFileName.chr)
## ---- Create Activity Data Frame from CSV File ----
activityData.df <- read.csv (extract.csvFileName.chr)
## ---- Calculate Total Number of Steps, ignoring Missing Data ----
totalSteps.int <- tapply (activityData.df $ steps,
activityData.df $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day ----
hist (totalSteps.int,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day ----
mean (totalSteps.int, na.rm=TRUE)
median (totalSteps.int, na.rm = TRUE)
## ---- Make Time Series Plot ----
averageSteps.df <- aggregate (x = list (steps = activityData.df $ steps),
by = list (interval = activityData.df $ interval),
FUN=mean,
na.rm=TRUE)
ggplot (data = averageSteps.df,
aes (x = interval, y = steps)) +
geom_line (color = "blue") +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
#---- Determine 5-Minute Interval with Maximum Number of Steps ----
averageSteps.df [which.max(averageSteps.df $ steps),] $ interval
## ---- Determine Number of Missing Values in Activity Dataset ----
sum (is.na (activityData.df))
## ---- Create New Activity Dataset with Missing Values as Mean of 5-Minute Interval ----
activityData.noNA.df <- activityData.df
for (i in 1 : nrow (activityData.noNA.df)) {
if (is.na (activityData.noNA.df $ steps [i])) {
activityData.noNA.df $ steps [i] <-
averageSteps.df [which (activityData.df $ interval [i] ==
averageSteps.df $ interval), ] $ steps
}
}
## ---- Calculate Total Number of Steps Using Activity Dataset with NO Missing Data ----
totalSteps.noNA.int <- tapply (activityData.noNA.df $ steps,
activityData.noNA.df $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day (NO Missing Data) ----
hist (totalSteps.noNA.int,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day
(NO Missing Data)",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day (NO Missing Data) ----
mean (totalSteps.noNA.int)
median (totalSteps.noNA.int)
## ---- Create New Factor Variable Day as Weekday or Weekend, Based on Date ----
weekdayWeekend <- function (aDate) {
if (weekdays (aDate) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (weekdays (aDate) %in% c("Saturday", "Sunday"))
return("weekend")
}
activityData.noNA.df $ day <- sapply (as.Date (activityData.noNA.df $ date),
FUN=weekdayWeekend)
## ---- Make Panel Plot of Time Series of 5-Minute Intervals vs. Average Number of Steps ----
averageSteps.noNA.df <- aggregate (steps ~ interval + day,
data = activityData.noNA.df,
mean)
ggplot (averageSteps.noNA.df, aes(interval, steps)) + geom_line(color = "blue") +
facet_grid(day ~ .) + xlab ("5-Minute Interval") + ylab ("Average Number Of Steps")
## --------------------------------------------------------------------------------------
## ---- peerAssessment1.R Housekeeping ----
setwd("D:/00 COURSERA/00 Reproducible Research/Peer Assessments/RepData_PeerAssessment1")
echo = TRUE
pkg.to.load.chr <- c ("ggplot2", "knitr")
lapply (pkg.to.load.chr, library, character.only = TRUE)
source.zipFileName.chr <- "activity.zip"
source.zipFile.url <-
"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
extract.csvFileName.chr <- "activity.csv"
activityData.dfName.chr <- "activityData.df"
## ---- Download Activity Data zip Dataset as Needed ----
if (! (file.exists (source.zipFileName.chr))) {
download.file (source.zipFile.url,
destfile = source.zipFileName.chr)
}
## ---- Extract Activity Data CSV File ----
unzip (source.zipFileName.chr)
## ---- Create Activity Data Frame from CSV File ----
activityData.df <- read.csv (extract.csvFileName.chr)
## ---- Calculate Total Number of Steps, ignoring Missing Data ----
totalSteps.int <- tapply (activityData.df $ steps,
activityData.df $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day ----
hist (totalSteps.int,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day ----
mean (totalSteps.int, na.rm=TRUE)
median (totalSteps.int, na.rm = TRUE)
## ---- Make Time Series Plot ----
averageSteps.df <- aggregate (x = list (steps = activityData.df $ steps),
by = list (interval = activityData.df $ interval),
FUN=mean,
na.rm=TRUE)
ggplot (data = averageSteps.df,
aes (x = interval, y = steps)) +
geom_line (color = "blue") +
xlab ("5-Minute Interval") +
ylab ("Average Number of Steps Taken")
#---- Determine 5-Minute Interval with Maximum Number of Steps ----
averageSteps.df [which.max(averageSteps.df $ steps),] $ interval
## ---- Determine Number of Missing Values in Activity Dataset ----
sum (is.na (activityData.df))
## ---- Create New Activity Dataset with Missing Values as Mean of 5-Minute Interval ----
activityData.noNA.df <- activityData.df
for (i in 1 : nrow (activityData.noNA.df)) {
if (is.na (activityData.noNA.df $ steps [i])) {
activityData.noNA.df $ steps [i] <-
averageSteps.df [which (activityData.df $ interval [i] ==
averageSteps.df $ interval), ] $ steps
}
}
## ---- Calculate Total Number of Steps Using Activity Dataset with NO Missing Data ----
totalSteps.noNA.int <- tapply (activityData.noNA.df $ steps,
activityData.noNA.df $ date,
FUN=sum,
na.rm = TRUE)
## ---- Create Histogram of Total Number of Steps Taken per Day (NO Missing Data) ----
hist (totalSteps.noNA.int,
col = "cyan",
breaks = 5,
main = "Histogram of Total Number of Steps Taken Each Day
(NO Missing Data)",
xlab = "Total number of Steps")
# ---- Calculate Mean and Median of Total Number of Steps Taken per Day (NO Missing Data) ----
mean (totalSteps.noNA.int)
median (totalSteps.noNA.int)
## ---- Create New Factor Variable Day as Weekday or Weekend, Based on Date ----
weekdayWeekend <- function (aDate) {
if (weekdays (aDate) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (weekdays (aDate) %in% c("Saturday", "Sunday"))
return("weekend")
}
activityData.noNA.df $ day <- sapply (as.Date (activityData.noNA.df $ date),
FUN=weekdayWeekend)
## ---- Make Panel Plot of Time Series of 5-Minute Intervals vs. Average Number of Steps ----
averageSteps.noNA.df <- aggregate (steps ~ interval + day,
data = activityData.noNA.df,
mean)
ggplot (averageSteps.noNA.df, aes(interval, steps)) + geom_line(color = "blue") +
facet_grid(day ~ .) + xlab ("5-Minute Interval") + ylab ("Average Number Of Steps")
## --------------------------------------------------------------------------------------
